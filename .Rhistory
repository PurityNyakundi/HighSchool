print(fit)
summary(fit,cBars=18,method = relative.influence,las =2)
fit$bestTune
trainControl <- trainControl(method="cv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=18,method = relative.influence,las =2)
fit$bestTune
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
trainControl <- trainControl(method="cv", number=5)
set.seed(7)
fit <- train(g3~predictors_t, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
trainControl <- trainControl(method="cv", number=5)
set.seed(7)
fit <- train(g3~testing[,predictors_t], data=testing, method="gbm", metric="RMSE", trControl=trainControl)
trainControl <- trainControl(method="cv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=18,method = relative.influence,las =2)
fit$bestTune
trainControl <- trainControl(method="repeatedv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=18,method = relative.influence,las =2)
fit$bestTune
pred<-predict(fit,testing)
head(pred)
d3_t<-preProcess(d3,method = "YeoJohnson")
d3<-predict(d3_t,newdata = d3)
# prepare resampling method
trainControl <- trainControl(method="cv", number=5)
set.seed(7)
fit <- train(g3~., data=d3, method="lm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
varImp(fit)
plot(varImp(fit))
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=18,method = relative.influence,las =2)
fit$bestTune
fit$pred
fit$metric
fit$finalModel$param
fit$finalModel$tuneValue
fit$finalModel$tuneValue
fit$modelInfo$parameters
fit$finalModel$tuneValue
fit$modelInfo$parameters
RSME
fit$finalModel$tuneValue
fit$modelInfo$parameters
fit$results
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
testing$dac
d3_t<-preProcess(testing,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = testing))
head(testing)
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
training[,predictors_t]
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~y, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
y=training[,predictors_t]
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~y, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
y=training[,predictors_t]
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~training[,predictors_t], data=testing, method="gbm", metric="RMSE", trControl=trainControl)
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
training[,predictors_t]
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~training[,predictors_t], data=testing, method="gbm", metric="RMSE", trControl=trainControl)
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
y = as.dataframe(training[,predictors_t])
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
y = as.data.frame(training[,predictors_t])
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~training[,predictors_t], data=testing, method="gbm", metric="RMSE", trControl=trainControl)
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~y, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
y = as.data.frame(training[,predictors_t])
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~y, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~training[,predictors_t], data=testing, method="gbm", metric="RMSE", trControl=trainControl)
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
formulas<-g3~training[,predictors_t]
fit <- train(, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
formulas<-g3~training[,predictors_t]
fit <- train(formulas, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
training[,predictors_t]
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=18,method = relative.influence,las =2)
fit$bestTune
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
fit$finalModel$tuneValue
fit$modelInfo$parameters
fit$results
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=18,method = relative.influence,las =2)
fit$bestTune
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
library(caret)
library(gbm)
# load data
d3_t<-preProcess(training,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = training))
head(training)
d3_t<-preProcess(testing,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = testing))
head(testing)
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
fit$finalModel$tuneValue
fit$modelInfo$parameters
fit$results
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
d3_t<-preProcess(testing,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = testing))
head(testing)
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
testing$pred<-predict(fit,testing)
head(testing$pred)
testing$pred<-predict(fit,testing)
d3_t<-preProcess(testing,method = "YeoJohnson")
#load the data sets and libraries
library(tidyverse)##Is a set of packages that include dplyr,tidyr etc
d1=read.csv("student-mat.csv",header=TRUE)
d2=read.csv("student-por.csv",header=TRUE)
head(d2)
d4=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
#d4[!duplicated(d4$guardian.x,d4)]
print(nrow(d4))
d3<-read.csv("d3.csv")
view(d3)
dim(d3)
anyDuplicated(colnames(d3))
#I normally use glimpse
glimpse(d3)
#Check per each column
colSums(is.na(d3))
summary(d3)
d3<-d3%>%
mutate(G1=(G1.x +G1.y)/2,
G2 = ( G2.x  + G2.y  )/2,
G3 = ( G3.x + G3.y  )/2)
dim(d3)
d3<-select(d3,-c(30:35))
str(d3)
d3[27:32]
colnames(d3)<-gsub(".x","",colnames(d3))
ncol(d3)
colnames(d3)[2]<-"sex"
colnames(d3)<-tolower(colnames(d3))
library(GGally)
colnames(d3)
numeral<-d3%>%
select_if(is.factor)
glimpse(numeral)
#cor()%>%
#corrplot::corrplot()
#par(mfrow=c(2,2))
numeral_n<-d3%>%
select_if(is.numeric)
glimpse(numeral_n)
for(i in 1:16) {
hist(numeral_n[,i], main=names(numeral_n)[i],xlab =names(numeral_n)[i],col = "powder blue" )
}
for(i in 1:16) {
counts <- table(numeral[,i])
name <- names(numeral)[i]
barplot(counts, main=name,col = "red")
}
x=numeral_n[,1:15]
y=numeral_n[,16]
numeral_n%>%
gather(-g3,key = "var",value = "value")%>%
ggplot(aes(x = value,y =g3 ))+
facet_wrap(~var,scales = "free")+
geom_jitter()+
geom_smooth(method = "lm")
# This sets plot images to a nice size.
options(repr.plot.width = 4, repr.plot.height = 4)
ggplot(d3,aes(x=g3,y =absences))+
geom_col(fill = "blue")+
facet_wrap(~internet+address)+
theme_classic()
options(repr.plot.width = 4, repr.plot.height = 4)
ggplot(d3,aes(x=g3,y =failures))+
geom_col(fill = "blue")+
facet_wrap(~higher)+
theme_classic()
library(caret)
set.seed(107)
inTrain <- createDataPartition(
y = d3$g3,
## the outcome data are needed
p = .75,
## The percentage of data in the
## training set
list = FALSE
)
training <- d3[ inTrain,]
testing  <- d3[-inTrain,]
training<-model.matrix(~.,data = training)
testing  <- model.matrix(~.,data = testing)
library(caret)
library(gbm)
# load data
d3_t<-preProcess(training,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = training))
head(training)
d3_t<-preProcess(testing,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = testing))
head(testing)
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
training[,predictors_t]
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
fit$finalModel$tuneValue
fit$modelInfo$parameters
fit$results
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
testing$pred<-predict(fit,testing)
head(testing$pred)
# prepare resampling method
trainControl <- trainControl(method="cv", number=5)
set.seed(7)
fit <- train(g3~., data=d3, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
d3_t<-preProcess(d3,method = "YeoJohnson")
d3<-predict(d3_t,newdata = d3)
# prepare resampling method
trainControl <- trainControl(method="cv", number=5)
set.seed(7)
fit <- train(g3~., data=d3, method="lm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
varImp(fit)
plot(varImp(fit))
testing$pred<-predict(fit,testing)
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# This sets plot images to a nice size.
options(repr.plot.width = 4, repr.plot.height = 4)
ggplot(d3,aes(x=g3,y =absences))+
geom_col(fill = "blue")+
facet_wrap(~internet+address)+
theme_classic()
options(repr.plot.width = 4, repr.plot.height = 4)
ggplot(d3,aes(x=g3,y =failures))+
geom_col(fill = "blue")+
facet_wrap(~higher)+
theme_classic()
library(caret)
set.seed(107)
inTrain <- createDataPartition(
y = d3$g3,
## the outcome data are needed
p = .75,
## The percentage of data in the
## training set
list = FALSE
)
training <- d3[ inTrain,]
testing  <- d3[-inTrain,]
training<-model.matrix(~.,data = training)
testing  <- model.matrix(~.,data = testing)
library(caret)
library(gbm)
# load data
d3_t<-preProcess(training,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = training))
head(training)
d3_t<-preProcess(testing,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = testing))
head(testing)
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
training[,predictors_t]
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
fit$finalModel$tuneValue
fit$modelInfo$parameters
fit$results
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
testing$pred<-predict(fit,testing)
head(testing$pred)
d3_t<-preProcess(testing,method = "YeoJohnson")
library(caret)
library(gbm)
# load data
d3_t<-preProcess(training,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = training))
head(training)
d3_t<-preProcess(testing,method = "YeoJohnson")
#load the data sets and libraries
library(tidyverse)##Is a set of packages that include dplyr,tidyr etc
d1=read.csv("student-mat.csv",header=TRUE)
d2=read.csv("student-por.csv",header=TRUE)
head(d2)
d4=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
#d4[!duplicated(d4$guardian.x,d4)]
print(nrow(d4))
d3<-read.csv("d3.csv")
view(d3)
dim(d3)
anyDuplicated(colnames(d3))
#I normally use glimpse
glimpse(d3)
#Check per each column
colSums(is.na(d3))
summary(d3)
d3<-d3%>%
mutate(G1=(G1.x +G1.y)/2,
G2 = ( G2.x  + G2.y  )/2,
G3 = ( G3.x + G3.y  )/2)
dim(d3)
d3<-select(d3,-c(30:35))
str(d3)
d3[27:32]
colnames(d3)<-gsub(".x","",colnames(d3))
ncol(d3)
colnames(d3)[2]<-"sex"
colnames(d3)<-tolower(colnames(d3))
library(GGally)
colnames(d3)
numeral<-d3%>%
select_if(is.factor)
glimpse(numeral)
#cor()%>%
#corrplot::corrplot()
#par(mfrow=c(2,2))
numeral_n<-d3%>%
select_if(is.numeric)
glimpse(numeral_n)
for(i in 1:16) {
hist(numeral_n[,i], main=names(numeral_n)[i],xlab =names(numeral_n)[i],col = "powder blue" )
}
for(i in 1:16) {
counts <- table(numeral[,i])
name <- names(numeral)[i]
barplot(counts, main=name,col = "red")
}
x=numeral_n[,1:15]
y=numeral_n[,16]
numeral_n%>%
gather(-g3,key = "var",value = "value")%>%
ggplot(aes(x = value,y =g3 ))+
facet_wrap(~var,scales = "free")+
geom_jitter()+
geom_smooth(method = "lm")
# This sets plot images to a nice size.
options(repr.plot.width = 4, repr.plot.height = 4)
ggplot(d3,aes(x=g3,y =absences))+
geom_col(fill = "blue")+
facet_wrap(~internet+address)+
theme_classic()
options(repr.plot.width = 4, repr.plot.height = 4)
ggplot(d3,aes(x=g3,y =failures))+
geom_col(fill = "blue")+
facet_wrap(~higher)+
theme_classic()
library(caret)
set.seed(107)
inTrain <- createDataPartition(
y = d3$g3,
## the outcome data are needed
p = .75,
## The percentage of data in the
## training set
list = FALSE
)
training <- d3[ inTrain,]
testing  <- d3[-inTrain,]
training<-model.matrix(~.,data = training)
testing  <- model.matrix(~.,data = testing)
library(caret)
library(gbm)
# load data
d3_t<-preProcess(training,method = "YeoJohnson")
training<-as.data.frame(predict(d3_t,newdata = training))
head(training)
d3_t<-preProcess(testing,method = "YeoJohnson")
testing<-as.data.frame(predict(d3_t,newdata = testing))
predictors_t<-c("g1","g2","absences","failures","studytime","famrel","dalc","activitiesyes","traveltime","traveltime")
training[,predictors_t]
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
fit$finalModel$tuneValue
fit$modelInfo$parameters
fit$results
trainControl <- trainControl(method="repeatedcv", number=5)
set.seed(7)
fit <- train(g3~g1+g2+absences+failures+studytime+famrel+dalc+activitiesyes+	traveltime+famsupyes, data=testing, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
fit$bestTune
testing$pred<-predict(fit,testing)
head(testing$pred)
head(testing)
# prepare resampling method
trainControl <- trainControl(method="cv", number=5)
set.seed(7)
fit <- train(g3~., data=d3, method="gbm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
summary(fit,cBars=10,method = relative.influence,las =2)
d3_t<-preProcess(d3,method = "YeoJohnson")
d3<-predict(d3_t,newdata = d3)
# prepare resampling method
trainControl <- trainControl(method="cv", number=5)
set.seed(7)
fit <- train(g3~., data=d3, method="lm", metric="RMSE", trControl=trainControl)
# display results
print(fit)
varImp(fit)
plot(varImp(fit))
